function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Jan-2018 12:20:26.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.032258065;0.083333333;0];
x1_step1.gain = [2.0666666677;2.18181818102479;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.79108945251464923842;1.4847122628126281363;-2.8839622933378428193;-2.7271766337269669478;-2.1252027497557257618;1.2319077503559163755;-0.96827522784249930865;2.6866694992193465019;3.2134085449623301933;1.8398259138636416932];
IW1_1 = [-0.19629117210187477238 -1.0424192286050215639 0.14102617212788617906;-0.33031147224469958879 -1.8363128117837235198 -0.098459322744160582275;1.5905422507387592113 -2.9418055603444202006 -0.20362003088443994536;1.3376110203780400276 -2.6685792372147614238 -0.24118848930275213482;0.020307280519511083927 -0.09104277903942731287 -4.6639578043541964902;0.28802315686060975253 1.734016619521987268 -0.06222713586071955405;0.18798700324805564521 0.99933585924793366662 0.15141130084878359763;0.0059621091006922212127 -0.15551355354732301906 -3.1530486586183750219;0.13747652435574103658 1.839595030640732265 -3.7674223193826712475;-0.0052397445163233817914 -0.30390853593094702134 -2.1182208860544609053];

% Layer 2
b2 = -1.8406352400362346877;
LW2_1 = [-3.5408078443773125521 -2.062330868177353782 0.2599728700373036272 -0.33968877167164501785 -0.30740088758493305798 -2.1664386888568154532 -4.0657765865092176938 1.2889868950246960999 -0.16977384321020133617 -1.5273617456398604908];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.05943316311957;
y1_step1.xoffset = 0.028858991;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
